---
import Layout from "@layout";
import "@css/style.css";
import "@css/index.css";
import "@components/switch.css"; 
import Obfuscated from "@components/Obfuscated.astro";
import Popup from "@components/Popup.astro";
---

<Layout title="Flamepass">
    <div class="home">
        <!-- <div class="top-banner" /> -->
        <form class="home-container">
            <h1 class="logotext"><Obfuscated word="Flamepass"></h1>
            <input class="home-input" placeholder="Search freely..."/>
            <div class="home-results"></div>
        </form>

        <div class="home-footer">
            <div class="switch-btn-container">
                <div class="switch-btn-current">
                    <span class="server-indicator">
                        Server:
                        <span class="server-indicator-value"><span class="indicator-dot"></span>Connecting...<span class="server-name"></span></span>
                    </span>
                </div>
                <div class="switch-btn open-up" style={{background: 'var(--primary-bg-color)'}}>
                    {
                        [
                            '/bare',
                        ].map(e=>{
                            return <a id={"server-" + e.split('.')[0]} class="modify-split-a" data-value={e}>{e.split('.')[0].split('-').map(e=>e.split('').map((e,i)=>i==0?e.toUpperCase():e).join('')).join(' ')} <span class="server-ping">0ms</span></a>
                        })
                    }
                </div>
            </div>
        </div>
    </div>
    <script is:inline src="/js/omnibox.js" />
    <script is:inline src="/js/bareServer.js"></script>
    <script is:inline>
        (function() {
            const prefixes = {
                'Ultraviolet': 'uv',
                'Dynamic': 'dynamic',
                'Rammerhead': 'rh',
                'Aero': 'aero',
            }

            const homeContainer = document.querySelector(".home-container");
            const switchBtnCurrentBare = document.querySelector(".switch-btn-current .server-indicator");
            const modifySplitA = document.querySelectorAll(".modify-split-a");
        
            const toggleSwitchBtnBare = (e) => {
                const switchBtn = document.getElementsByClassName('switch-btn')[1];
        
                if (switchBtn.style.display == 'block') {
                    switchBtn.style.opacity = '0';
                    setTimeout(function() {
                        switchBtn.style.display = 'none';
                    }, 100);
                } else {
                    switchBtn.style.display = 'block';
                    requestAnimationFrame(() => {
                    switchBtn.style.opacity = '1';
                    });
                }
        
                return e.stopPropagation();
            }
        
            // const recursive = (el) => {
            //     var arr = [];
            
            //     function iterate(el) {
            //         if (el.childNodes) el.childNodes.forEach(e=>(arr.push(e), iterate(e)));
        
            //         return;
            //     }
        
            //     arr.push(el);
        
            //     iterate(el)
        
            //     return arr;
            // }
        
            const submit = (e) => {
                e.preventDefault();
        
                const input = document.querySelector('.home-input');
                const results = document.querySelector('.home-results');
        
                if (!input.value) return;
        
                results.innerHTML = '';
        
                let url;
        
                if (input.value.match(/^https?:\/\//g)) {
                    url = input.value;
                } else {
                    url = 'https://www.google.com/search?q=' + encodeURIComponent(input.value);
                }
        
                var prefix = document.cookie.split('; ').map(e=>e.split('=')).find(e=>e[0]=='astro-proxy') ? prefixes[document.cookie.split('; ').map(e=>e.split('=')).find(e=>e[0]=='astro-proxy')[1]] : prefixes['Ultraviolet'];
        
                // this is the basic idea for what i'm trying to do
                // waiting for sylvie to finish the menu component and cat for the focus mode
                const iframe = document.createElement("iframe");
                iframe.src = `/~/${prefix}/${encodeURIComponent(url)}`;
                iframe.style.width = "100%";
                iframe.style.height = "100%";
                iframe.style.border = "none";
                iframe.style.overflow = "hidden";
                iframe.style.position = "absolute";
                iframe.style.zIndex = '999999';
                iframe.style.top = "0px";

                document.querySelector(".home").style.paddingBottom = "0px";
                homeContainer.parentNode.appendChild(iframe);
            }
        
            const switchServer = (e) => {
                e.preventDefault();
        
                const server = e.target.dataset.value;
        
                e.target.parentNode.style.opacity = '0';
        
                document.querySelector('.server-indicator-value').childNodes[1].textContent = 'Connecting ';
                document.querySelector('.server-indicator-value').classList.remove('connected');
                document.querySelectorAll('.server-name')[0].innerText = server.split('.')[0].toUpperCase();
        
                if (window.connectBare) {
                    window.connectBare(server).then(() => {
                        document.querySelector('.server-indicator-value').childNodes[1].textContent = 'Connected ';
                        document.querySelector('.server-indicator-value').classList.add('connected');
                    
                        localStorage.server = server;
                    }).catch(() => {
                        document.querySelector('.server-indicator-value').childNodes[1].textContent = 'Disconnected ';
                    });
                }
        
                document.cookie = 'astro-bare='+server+'; expires=Fri, 31 Dec 9999 23:59:59 GMT'
        
                setTimeout(function() {
                    e.target.parentNode.style.display = 'none';
                }, 100);
            }
        
            homeContainer.onsubmit = submit;
            switchBtnCurrentBare.onclick = toggleSwitchBtnBare;
            modifySplitA.forEach(e => e.onclick = switchServer);
        })();   
    </script>
</Layout>
